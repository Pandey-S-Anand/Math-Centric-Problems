//Bruteforce Approach

class Solution {

    static long count(int N) {
        int count = 0;
        for (int i = 1; i <= N; i++) {
            if (hasOddNumberOfFactors(i)) {
                count++;
            }
        }
        return count;
    }

    private static boolean hasOddNumberOfFactors(int n) {
        int count = 0;
        for (int i = 1; i <= (int) Math.sqrt(n); i++) {
            if (n % i == 0) {
                if (i == (n / i)) {
                    count++;
                } else {
                    count += 2;
                }
            }
        }

        return (count % 2) != 0;
    }
}

// Better Approach
/*
 * A factor of a number N is a value that divides N without leaving a remainder.
 * Factors always come in pairs, meaning that if you have a factor 'x' of N, then 'N/x' is also a factor of N.
 * The exception to this rule is when 'x' is the square root of N, because in that case, the factor pair is the same.
 * The key observation is that only perfect square numbers have an odd number of
 * factors because in perfect squares,the square root is a factor that doesn't have a pair.
 * For non-perfect squares, the square root is not an integer, so all factors come in pairs.
 * So, when you're asked to count the numbers with an odd number of factors from 1 to N,
 * you're essentially counting the perfect squares within that range, because only they have an odd number of factors.
 */

class Solution {
    static long count(int N) {
        return countPerfectSquares(1, N);
    }

    private static long countPerfectSquares(int a, int b) {
        long cnt = 0;
        for (int i = a; i <= b; i++) {
            if (Math.sqrt(i) == (long) Math.sqrt(i)) {
                cnt++;
            }
        }
        return cnt;
    }
}


// Optimal Approach

class Solution {
    static long count(int N) {
        return countPerfectSquares(1, N);
    }

    private static long countPerfectSquares(int a, int b) {
        return (long) (Math.floor(Math.sqrt(b)) - Math.ceil(Math.sqrt(a)) + 1);
    }
}
