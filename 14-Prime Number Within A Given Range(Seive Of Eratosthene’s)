//Naive Approach

class Solution {
    static ArrayList<Integer> sieveOfEratosthenes(int n) {
        ArrayList<Integer> primes = new ArrayList<>();
        
        if (n < 2) {
            return primes;
        }
        
        boolean[] isPrime = new boolean[n + 1];
        Arrays.fill(isPrime, 2, n + 1, true);

        for (int num = 2; num <= n; num++) {
            if (isPrime[num]) {
                for (int multiple = num * 2; multiple <= n; multiple += num) {
                    isPrime[multiple] = false;
                }
            }
        }

        for (int i = 2; i <= n; i++) {
            if (isPrime[i]) {
                primes.add(i);
            }
        }
        
        return primes;
    }
}


//Good Implementation

class Solution {
    static ArrayList<Integer> sieveOfEratosthenes(int n) {
        ArrayList<Integer> primes = new ArrayList<>();
        
        if (n < 2) {
            return primes;
        }
        
        boolean[] isPrime = new boolean[n + 1];
        Arrays.fill(isPrime, 2, n + 1, true);

        for (int num = 2; num <= n / 2; num++) {
            if (isPrime[num]) {
                for (int multiple = num * 2; multiple <= n; multiple += num) {
                    isPrime[multiple] = false;
                }
            }
        }

        for (int i = 2; i <= n; i++) {
            if (isPrime[i]) {
                primes.add(i);
            }
        }
        
        return primes;
    }
}


//Optimal Implementation

class Solution {
    static ArrayList<Integer> sieveOfEratosthenes(int n) {
        ArrayList<Integer> primes = new ArrayList<>();
        
        if (n < 2) {
            return primes;
        }
        
        boolean[] isPrime = new boolean[n + 1];
        Arrays.fill(isPrime, 2, n + 1, true);

        int sqrt = (int) Math.sqrt(n);

        for (int num = 2; num <= sqrt; num++) {
            if (isPrime[num]) {
                for (int multiple = num * num; multiple <= n; multiple += num) {
                    isPrime[multiple] = false;
                }
            }
        }

        for (int i = 2; i <= n; i++) {
            if (isPrime[i]) {
                primes.add(i);
            }
        }
        
        return primes;
    }
}
